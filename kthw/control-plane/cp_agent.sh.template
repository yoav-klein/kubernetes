#!/bin/bash

cmd=$1

cp_home={{CP_HOME}}
k8s_version={{K8S_VERSION}}

## Logging functions

GREEN="\e[32;1m"
RED="\e[31;1m"
RESET="\e[0m"
TITLE="\e[0;44m"
YELLOW="\e[33;1m"

echo_title() {
    echo -e "${TITLE} $1 ${RESET}"
}

log() {
    log_level=$1; shift
    message=$1
    if [ -z "$message" ]; then
        echo "Usage: log <message>"
        return
    fi
    echo "$log_level: cp_agent:${FUNCNAME[2]}:${BASH_LINENO[1]} $message"
}

log_warning() {
    log WARNING "$1"
}

log_info() {
    log INFO "$1"
}


log_debug() {
    log DEBUG "$1"
}

log_error() {
    log ERROR "$1"
}

log_success() {
    echo -e "${GREEN}=== $2 $RESET"
}

###################### utility functions #############


__rmdir_if_exist() {
    [ -z "$1" ] && { log_error "directory not provided"; return 1; }
    [ -d $1 ] && { rm -rf $1  || { log_error "failed to remove directory $1"; return 1; } }
    return 0
}

__rm_if_exist() {
    [ -z "$1" ] && { log_error "file not provided"; return 1; }
    [ -f $1 ] && { rm -rf $1 || { log_error "failed to remove file $1"; return 1; } }
    return 0
}

_delete_app_directories() {
    local sc=0
    __rmdir_if_exist /etc/kubernetes || sc=1
    __rmdir_if_exist /var/lib/kubernetes || sc=1

    [ $sc=0 ] && log_debug "app directories removed"
    return $sc
}

_delete_service_files() {
    local sc=0
    __rm_if_exist /etc/systemd/system/kube-apiserver.service || sc=1
    __rm_if_exist /etc/systemd/system/kube-controller-manager.service || sc=1
    __rm_if_exist /etc/systemd/system/kube-scheduler.service || sc=1
    
    return $sc
}

_create_app_directories() {
    mkdir -p /etc/kubernetes/config || { log_error "failed to create /etc/kubernetes/config"; return 1; }
    mkdir -p /var/lib/kubernetes || { log_error "failed to create /var/lib/kubernetes"; return 1; }

    log_debug "created directories for services"
}

# again, using set -e is not a good practice, but we're doing it with caution
_install_app_files() {
    # run a subshell so that we can use -e without exiting the script
    # if one copy fails, delete all
    (
    set -e
    cp ${cp_home}/ca.crt /var/lib/kubernetes
    cp ${cp_home}/ca.key /var/lib/kubernetes
    cp ${cp_home}/kube-apiserver.crt /var/lib/kubernetes
    cp ${cp_home}/kube-apiserver.key /var/lib/kubernetes
    cp ${cp_home}/apiserver-etcd-client.crt /var/lib/kubernetes
    cp ${cp_home}/apiserver-etcd-client.key /var/lib/kubernetes
    cp ${cp_home}/apiserver-kubelet-client.crt /var/lib/kubernetes
    cp ${cp_home}/apiserver-kubelet-client.key /var/lib/kubernetes
    cp ${cp_home}/service-accounts.crt /var/lib/kubernetes
    cp ${cp_home}/service-accounts.key /var/lib/kubernetes
    cp ${cp_home}/encryption-config.yaml /var/lib/kubernetes
    cp ${cp_home}/kube-scheduler.kubeconfig /var/lib/kubernetes
    cp ${cp_home}/kube-scheduler.yaml /etc/kubernetes/config
    cp ${cp_home}/kube-controller-manager.kubeconfig /var/lib/kubernetes
    )
}

_install_service_files() {
    cp ${cp_home}/kube-apiserver.service /etc/systemd/system || return 1
    cp ${cp_home}/kube-controller-manager.service /etc/systemd/system || return 1
    cp ${cp_home}/kube-scheduler.service /etc/systemd/system || return 1
    
}

_enable_services() {
    systemctl daemon-reload || { log_error "failed to daemon-reload"; return 1; }
    
    # if one of  them fails to enable, remove the services and reload daemon
    systemctl enable kube-apiserver kube-scheduler kube-controller-manager || { \
        log_error "failed to enable services"; return 1; }
    
    log_debug "enabled control plane services"

}



################### commands functions ###########################


##################
#
#  install the control plane binaries
#   including kube-apiserver, kube-controller-manager,
#   and kube-scheduler
#
#

install_binaries() {
    if [ "$(_check_binaries_installed)" = "true" ]; then
        log_warning "binaries already installed"
        return 2
    fi
    
    echo_title "installing binaries"

    local kube_scheduler_url="https://dl.k8s.io/v${k8s_version}/bin/linux/amd64/kube-scheduler"
    local kube_apiserver_url="https://dl.k8s.io/v${k8s_version}/bin/linux/amd64/kube-apiserver"
    local kube_controller_manager_url="https://dl.k8s.io/v${k8s_version}/bin/linux/amd64/kube-controller-manager"
    local kubectl_url="https://dl.k8s.io/v${k8s_version}/bin/linux/amd64/kubectl"
    
    curl -sSfL $kube_scheduler_url -o /tmp/kube-scheduler || { log_error "failed downloading kube-scheduler"; return 1 ; }
    curl -sSfL $kube_apiserver_url -o /tmp/kube-apiserver || { log_error "failed downloading kube-apiserver"; return 1 ; } 
    curl -sSfL $kube_controller_manager_url -o /tmp/kube-controller-manager || \
        { log_error "failed downloading kube-controller-manager"; return 1 ; }

    chmod +x /tmp/kube-scheduler /tmp/kube-apiserver /tmp/kube-controller-manager

    mv /tmp/kube-scheduler /tmp/kube-apiserver /tmp/kube-controller-manager \
        /usr/local/bin || { log_error "failed moving binaries to /usr/local/bin"; return 1 ; }

    log_info "installed control plane binaries"
}

uninstall_binaries() {
    if [ "$(_check_services_loaded)" = "true" ]; then
        log_warning "services are loaded, unload them first"
        return 3
    fi
    if [ "$(_check_binaries_installed)" = "false" ]; then
        log_warning "binaries already uninstalled"
        return 2
    fi
    
    echo_title "uninstalling binaries"
    rm /usr/local/bin/kube-* || { log_error "failed to remove binaries"; return 1; } 
    log_info "uninstalled control plane binaries"
}

###################
#
#   do all the preparations for installing
#   the control plane services, i.e. creating
#   directories, copying certifiates, etc.
#
#

install_services() {
    if [ "$(_check_services_loaded)" = "true" ]; then
        log_warning "services already loaded"
        return 2
    fi
    if [ "$(_check_binaries_installed)" = "false" ]; then
        log_warning "binaries uninstalled, install them first"
        return 3
    fi 
    
    echo_title "installing services"
    
    _create_app_directories || { _delete_app_directories; log_error "failed to install services"; return 1; }  
    _install_app_files
    if [ $? != 0 ]; then 
        _delete_app_directories
        log_error "failed to install services" 
        return 1
    fi
    _install_service_files || { uninstall_services; log_error "failed intsalling services"; return 1; }
    _enable_services || { uninstall_services; log_error "failed to enable services"; return 1; }

    log_info "installed services"

}

## as in etcd, this function is safe (idempotent)
uninstall_services() {
    if [ "$(_check_services_active)" = "true" ]; then
         log_warning "services are active, stop them first";
         return 3
    fi
    
    echo_title "uninstalling services"

    local sc=0
    { _delete_service_files && systemctl daemon-reload; } || { log_error "failed to remove services"; sc=1; }
    _delete_app_directories || { log_error "failed to delete app directories"; sc=1; }
    
    [ $sc=0 ] && log_info "control plane services uninstalled"
    return $sc
}



# start the control plane services
start_services() {
    if [ $(_check_services_active) = "true" ]; then
        log_warning "service already running"
        return 2
    fi
    if [ $(_check_services_loaded) = "false" ]; then
        log_warning "service is not loaded, load service first"
        return 3
    fi
    if [ $(_check_binaries_installed) = "false" ]; then
        log_warning "etcd binaries uninstalled, install first"
        return 3
    fi

    # if one fails to start, the others are started, but the exit code is non-zero
    systemctl start kube-apiserver kube-scheduler kube-controller-manager || { log_error "failed to start services"; return 1;  }
    
    if [ $(_check_services_active) = "true" ]; then 
        log_info "started control plane services"
    else
        log_error "at least one service is down"
    fi
}

stop_services() {
    # if one fails to stop, the others are stopped, but exit code is non-zero
     if [ "$(_check_services_active)" = "false" ]; then
        log_warning "service already stopped"
        return 2
    fi

    systemctl stop kube-apiserver kube-scheduler kube-controller-manager || { log_error "failed to stop services"; return 1; }

    log_info "stopped control plane services"
}



############### status functions ##############

status() {
    local is_installed=$(_check_binaries_installed)
    local is_loaded=$(_check_services_loaded)
    local is_landed=$(_check_landed)
    local is_active=$(_check_services_active)
    local is_dirty=$(_check_dirty)
    echo '{}' | jq ".installed |= $is_installed | .loaded |= $is_loaded | .active |= $is_active | .landed |= $is_landed \
        | .dirty = $is_dirty"
}


####
#
# check services active
# 
# true if all services are active

_check_services_active() {
    systemctl is-active kube-apiserver > /dev/null 2>&1 && \
    systemctl is-active kube-scheduler > /dev/null 2>&1 && \
    systemctl is-active kube-controller-manager > /dev/null 2>&1 && echo "true" || echo "false"
}



#### 
#
#   check service loaded
#   
#   true if all services enabled: kube-apiserver, kube-scheduler, kube-controller-manager

_check_services_loaded() {
       systemctl is-enabled kube-apiserver > /dev/null 2>&1 && \
       systemctl is-enabled kube-scheduler > /dev/null 2>&1  && \
       systemctl is-enabled kube-controller-manager > /dev/null 2>&1 && echo "true" || echo "false"
}

_check_binaries_installed() {
    test -f /usr/local/bin/kube-apiserver && test -f /usr/local/bin/kube-controller-manager && \
        test -f /usr/local/bin/kube-scheduler && echo "true" || echo "false"
     
}

_check_dirty() {
    test -d /etc/kubernetes/config || test -d /var/lib/kubernetes || \
    test -f /etc/systemd/system/kube-scheduler.service || test -f /etc/systemd/system/kube-apiserver.service \
    || test -f /etc/systemd/system/kube-controller-manager.service && echo "true" || echo "false"
}


_check_landed() {    
    ### file_list - a global variable that holds the file list necessary for the control plane
    local file_list=(
    ca.crt \
    ca.key \
    kube-apiserver.crt \
    kube-apiserver.key \
    apiserver-etcd-client.crt \
    apiserver-etcd-client.key \
    apiserver-kubelet-client.crt \
    apiserver-kubelet-client.key \
    service-accounts.crt \
    service-accounts.key \
    encryption-config.yaml \
    kube-scheduler.kubeconfig \
    kube-scheduler.yaml \
    kube-controller-manager.kubeconfig
    )
    
    for file in ${file_list[@]}; do
        [ ! -f "$cp_home/$file" ]  && { echo "false"; return ;}
    done

    echo "true"
}

usage() {
    echo "Usage:"
    echo "cp_agent.sh <command>"
    echo ""
    echo "Commands:"
    echo "install_binaries   - Install the control plane binaries"
    echo "uninstall_binaries - Uninstall the control plane binaries"
    echo "install_services   - Install the control plane services"
    echo "uninstall_services - Uninstal the control plane services"
    echo "start              - Start the control plane"
    echo "stop               - Stop the control plane"
    echo "test               - Test if control plane is running"
    echo "status             - Get the control plane status of the node"

}

### verify running with sudo

user_id=`id -u`
if [ $user_id -ne 0 ]; then
    echo "Must run as sudo"
    exit 1
fi


case $cmd in
    install_binaries) install_binaries;;
    uninstall_binaries) uninstall_binaries;;
    install_services) install_services;;
    uninstall_services) uninstall_services;;
    start) start_services;; 
    stop) stop_services;;
    status) status;;
    *) usage;;
esac


### TODO:
#
#   * logical problem - is the status functions is_active and is_loaded
#        there's a probelm - it returns true only if all are true
#        so the stop_services function won't do anything in case only part of them are active
#
#   * __rmdir_if_exist and __rm_if_exist


## LIMITATIONS
#
#   1. if some services are loaded, check_services_loaded will return false,
#      so that uninstall_services will not do anything
#


# 
#   TEST
#   1. one service file is corrupt, see behaviour
#
#
