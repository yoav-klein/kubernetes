#!/bin/bash

set -e 

cmd=$1

etcd_home=~/k8s/etcd
etcd_version={{etcd_version}}

clean() {
    echo "=== removing old etcd if exists"
    rm -f /tmp/etcd-${etcd_version}-linux-amd64.tar.gz
    rm -rf /tmp/etcd-download-test
    
    echo "=== removing old dierctories"
    sudo rm -rf /etc/etcd /var/lib/etcd

    echo "=== removing etcd binaries"
    sudo rm /usr/local/bin/etcd*

}

uninstall() {
    sudo systemctl disable etcd || echo "=== failed to remove service etcd"
    echo "=== removing service unit file"
    sudo rm /etc/systemd/system/etcd.service || echo "== failed to remove service file"
    sudo systemctl daemon-reload || echo "=== systemctl deamon-reload failed"
}

stop_service() {
    echo "=== stop etcd if running"
    if systemctl list-units --full --all -t service | grep etcd; then
        sudo systemctl stop etcd || echo "=== failed to stop ETCD service"
    fi
}

install_etcd() {
    # choose either URL
    local google_url=https://storage.googleapis.com/etcd
    local github_url=https://github.com/etcd-io/etcd/releases/download
    local download_url=${google_url}
   
    echo "=== downloading etcd"
    curl -L ${download_url}/${etcd_version}/etcd-${etcd_version}-linux-amd64.tar.gz -o /tmp/etcd-${etcd_version}-linux-amd64.tar.gz
    
    [ -d /tmp/etcd-download-test ] || mkdir -p /tmp/etcd-download-test 
    tar xzvf /tmp/etcd-${etcd_version}-linux-amd64.tar.gz -C /tmp/etcd-download-test --strip-components=1
    rm -f /tmp/etcd-${etcd_version}-linux-amd64.tar.gz
    
    sudo cp /tmp/etcd-download-test/etcd /usr/local/bin
    sudo cp /tmp/etcd-download-test/etcdctl /usr/local/bin
    sudo cp /tmp/etcd-download-test/etcdutl /usr/local/bin
}

create_directories() {
    sudo mkdir -p /etc/etcd /var/lib/etcd
}

copy_certificates() {
    sudo cp $etcd_home/ca.crt /etc/etcd
    sudo cp $etcd_home/kube-apiserver.crt /etc/etcd
    sudo cp $etcd_home/kube-apiserver.key /etc/etcd
}

copy_unit_file() {
    sudo cp $etcd_home/etcd.service /etc/systemd/system    
}

test_installation() {
    if etcd --version; then return 0; else return 1; fi
}

start_service() {
    sudo systemctl start etcd
}

test_service() {
    if ! sudo systemctl is-active etcd; then echo "=== ETCD INSTALLATION FAILED !"; return 1; fi
}


install() {
    install_etcd
    if ! test_installation; then echo "=== ETCD INSTALLATION FAILED !"; exit 1; fi
    create_directories
    copy_certificates
    copy_unit_file
    
    sudo systemctl daemon-reload || echo "=== systemctl daemon-reload failed !"
    sudo systemctl enable etcd || echo "=== systemctl enabel etcd failed !"
}

test() {
    export ETCD_API=3
    output=$(etcdctl member list --write-out=json  \
   --endpoints=https://127.0.0.1:2379 \
   --cacert=$etcd_home/ca.crt \
   --cert=$etcd_home/kube-apiserver.crt \
   --key=$etcd_home/kube-apiserver.key)
    
    num_members=$(echo $output | jq ".members | length")
    expected={{NUM_CONTROLLERS}}

    if [ "$num_members" = "$expected" ]; then
        return 0
    else
        return 1
    fi
}

reset() {
    stop_service
    uninstall
    clean
}

usage() {
    echo "Usage: "
    echo "setup.sh [install, start, stop, uninstall, reset]"
    echo "Commands:"
    echo "install - install the etcd service"
    echo "start - manually start the service"
    echo "stop - manually stop the service"
    echo "uninstall - uninstall the etcd service"
    echo "reset - leave no mark of etcd on this machine"
}

case $cmd in
    install) install;;
    test) test;;
    start) start_service;;
    stop) stop_service;;
    uninstall) uninstall;;
    reset) reset;;
    *) usage;;
esac




